
DANGER: this is an inherently insecure prototype. Please do not use
over a physical network until a version has been released that
addresses an important architectural security flaw described in the
Security section.

Typos is an attempt to combine the good parts of terminal application
development and web development into a graphical command line hosted
in the browser.

Instead of sending ANSI escape codes, controlling applications send
messages to the browser. Browsers offer several advantages over
terminal emulators for command-line developers:

- typeset text
- forms and widgets
- client-side scripting
- graphics

Command-line applications are easier to develop and deploy than web
applications:

- before startup, your application already has secure, bidirectional
  communication established with an authenticated user
- you deploy your app to the filesystem
  - does not require reverse proxying or the assignment of an
    arbitrary port
- works seamlessly over SSH

Also, the command-line interaction style has unique benefits that are
easy to duplicate in the browser's document-oriented runtime
environment.

* What this is not

RDP or X. It specifically tries to replicate a command-line-like style
of interaction, whereas graphical desktop protocols are for
single-application, single-process windows.

A terminal emulator. No attempt has been made to handle ANSI escape
codes. Why use `^[1234;666;12m` when you can use
`.foo {background-color: blue}`? Typos can host web-based terminal
emulators, however.

* Hello Typos

A hello-world command-line application, written in Ruby:

#+BEGIN_SRC ruby
    require 'typos'

    Typos.send("document.write(\"<h1>Hi there</h1>\")");
#+END_SRC

* Requirements

Should run on most versions of Linux, OS X, and Windows. Requires Java
1.6 or higher.

* How it works

There are two parts of the architecture: middleware that lets local
applications connect to browser windows over WebSockets, and then a
shell process that uses this middleware to provide a simple
command-line programming environment for child applications.

The middleware is a service that simplifies connecting to a browser.
It abstracts away details of speaking HTTP and the WebSocket protocol,
and exposes a simpler, more secure protocol that consists of framed
messages over stdio. Typos clients connect over one port, HTTP clients
connect over another, and the service proxies messages between them.
Communication is only established if both ends of the connection know
a shared secret, distributed by whatever process initiated the
creation of a new Typos-connected browser window.

The shell environment provides the HTML and JavaScript that
command-line applications depend on. It also handles the problem of
mixed-use stdio. Since most applications expect stdin and stdout to be
text streams, and libraries can unexpectedly write plain text to these
streams, it would be safe and convenient to restore that behavior by
default and pass messages over a different channel. Therefore, the
shell wraps all stdio bytes in messages, and then listens for raw
messages on yet another socket on a random port, protected by yet
another shared secret.

Typos works seamlessly over SSH, even the mixed-use-stdio gyrations
that the shell goes through. Since the shell is running on the remote
side of the connection, and it speaks framed messages over stdio, all
the client side of the connection has to do is forward the messages to
the raw message channel.

Although the middleware is currently a service, it could easily be
packaged as a shared library instead.

** Typos Shell Protocol

The Typos shell is responsible for providing the browser with the
page's initial HTML and JavaScript, and for interpreting the WebSocket
messages it receives. In the browser, messages are `eval()`ed.

Stdio communication is sent so that it is delivered via a standard
callback in the browser:

#+BEGIN_SRC javascript
    Typos.handle_stdin("<stdin data>")
#+END_SRC

* Security

Since it provides a command-line user experience, Typos should also
provide the same security guarantees that a terminal emulator
provides. Since the browser runs content from third-party servers,
i.e. remote hosts that you SSH into, it must protect itself from
malicious code on those servers. Communicating over TCP means that the
service must protect access to the port from untrusted connections

All web applications must perform authentication over a network port.
Even if the server is only listening on localhost, other users on the
system could open a connection to the port and run processes as
another user. Typos uses a shared secret to authenticate users who
access the port, similar to key-based authentication in X.

The browser to web server communication is only over TCP for
convenience and portability. Since the WebSocket communication is not
really intended to be used over a network, no support is provided for
HTTPS. If such support were provided, users might come to the mistaken
conclusion that it was free of vulnerabilities. (Rather than allow
users to rely on an untested lock, I am forcing them to leave this
gate wide open and rely on SSH.) It would be possible to write another
transport mechanism that did not communicate over TCP, and therefore
did not require authentication.

Unlike a terminal emulator, a browser-based client allows remote hosts
to inject malicious JavaScript that remains resident after the
connection has been closed. This violates the expectation that remote
hosts can only affect the window while they are connected. To restore
this guarantee, remote connections should be run in a sandboxed
iframe. Until this vulnerability is addressed, please treat this
project as an insecure prototype.

* Motivation

Looking at nicely formatted code in a monospaced font is beautiful,
but looking at unformatted log lines in a monospaced font is the
visual equivalent of walking over broken glass. Once I realized how
squint-inducing a lot of the text I was looking at was and started
down the path of changing it, I began to want everything to be typeset
in a proportional font.

Here is an ordered list of my preferred UI development tools:

- HTML and JavaScript
- Swing
- Curses

I wanted to be able to write a tool like `ls` using HTML typeography
instead of calculating the layout myself.

I love HTML+JS much more than Swing based on my particular set of
experiences. I would like to add the caveat that I would rate myself
as an out-of-date Swing developer and an only-somewhat-experienced
JavaScript developer. Typeographical flow does what I want most of the
time, whereas something like GroupLayout seems too low-level,
requiring a WYSIWYG editor to be used efficiently.

HTML documents are composed of user-selectable,
incrementally-searchable, serializable text, which is a powerful
abstraction. It is one layer above the grid of character cells that a
terminal provides.

I wanted general-purpose graphics and typesetting in my command-line
sessions.

I was inspired by several similar projects:

- TermKit (http://acko.net/blog/on-termkit/)
- the IPython Notebook (http://ipython.org/notebook.html)
- XMLterm (http://www.xml.com/pub/a/2000/06/07/xmlterm/index.html)

There are similar projects out there:

- https://github.com/mitotic/graphterm

Chrome Native messaging would be a good technology fit, but it would
force users to run a specific browser, which would be a barrier to
adoption:

- http://developer.chrome.com/extensions/messaging#native-messaging

* License

A BSD-style license in LICENSE.
